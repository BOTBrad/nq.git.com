{namespace desktop.directory}

/**
 * Template that displays all states in the directory in a list view with a map of the united states.
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .stateList}
  <!DOCTYPE html>
  <html>
    <head>
      {call helpers.commonHeadTags data="all"/}
      <link href="http://fonts.googleapis.com/css?family=Lato:100,300,400,700" rel="stylesheet" type="text/css">
      <link rel="stylesheet" href="{$baseUrl}css/lib/jquery-jvectormap-1.2.2.css" type="text/css">
      <link rel="stylesheet" type="text/css" href="{$baseUrl}css/directory/default.css">
    </head>
    <body>
      {call helpers.header data="all"}
        {param baseUrl: $baseUrl /}
      {/call}
      <div class="dir-container">
        {call helpers.directory.listDirectory data="all" }
          {param showNumLocs: false /}
        {/call}
        <div id="us-map"></div>
      </div>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
      <script src="{$baseUrl}js/lib/jquery-jvectormap-1.2.2.min.js"></script>
      <script src="{$baseUrl}js/lib/jquery-jvectormap-us-aea-en.js"></script>
      <script type="text/javascript">
        {literal}
          $(document).ready(function() {
            $('#us-map').vectorMap({
              map: 'us_aea_en',
              backgroundColor: '#f1f1f1',
              regionStyle: {
                initial: {
                  fill: '#ffffff',
                  stroke: '#b8b8b8',
                  'stroke-width': 1,
                  cursor: 'pointer'
                },
                hover: {
                  fill: 'red'
                }
              },
              series: {
                regions: [{
                  scale: {
                    '0': '#ffffff',
                    '1': '#8d8d8d'
                  },
                  attribute: 'fill',
                  values: {
                  {/literal}
                  {foreach $key in $keys}
                    'US-{$key.key}': '1'{if not isLast($key)},{/if}
                  {/foreach}
                  {literal}
                  }
                }]
              },
              onRegionClick: function(event, code){
              //TODO(ltacon): check if valid state, if so, go to it
              {/literal}
              {foreach $key in $keys}
                if (code == 'US-{$key.key}') {literal}{{/literal}
                  window.location.href = '{$baseUrl}{$key.url}';
                {literal}}{/literal}
              {/foreach}
              {literal}
              },
              onRegionLabelShow: function(e, el, code){
                e.preventDefault();
              }
            });
          });
        {/literal}
      </script>
    </body>
  </html>
{/template}

/**
 * Template that displays all keys in the directory in a list view with a dynamic map.
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .cityList}
  <!DOCTYPE html>
  <html>
    <head>
      {call helpers.commonHeadTags data="all"/}
      <link href="http://fonts.googleapis.com/css?family=Lato:100,300,400,700" rel="stylesheet" type="text/css">
      <link rel="stylesheet" type="text/css" href="{$baseUrl}css/directory/default.css">
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
    </head>
    <body>
      {call helpers.header data="all"}
        {param baseUrl: $baseUrl /}
      {/call}
      <div class="dir-container">
        {call helpers.directory.listDirectory data="all" }
          {param showNumLocs: true /}
        {/call}
        <div class="map">
          <div id="dir-map"></div>
        </div>
      </div>
      {call helpers.directory.mapSetup data="all"}
        {param zoom: 9 /}
      {/call}
    </body>
  </html>
{/template}

/**
 * Template that displays all locations in the directory in a list view with a dynamic map.
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .locationList}
<html>
  <head>
    {call helpers.commonHeadTags data="all"/}
    <link href="//fonts.googleapis.com/css?family=Lato:100,300,400,700" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="{$baseUrl}css/directory/default.css">
  </head>
  <body>
      {call helpers.header data="all"}
        {param baseUrl: $baseUrl /}
      {/call}
    <div class="dir-container">
      {call helpers.directory.locationList data="all"}
        {param showNumLocs: false /}
      {/call}
      <div class="map">
        <div id="dir-map"></div>
      </div>
    </div>
    {call helpers.directory.mapSetup data="all"}
      {param zoom: 12 /}
      {param source: 'locationlist'/}
    {/call}
  </body>
</html>
{/template}

/**
 * Generic template that displays items in a simple column list view.
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .genericList}
  <html>
    <head>
      {call helpers.commonHeadTags data="all"/}
      <link href="http://fonts.googleapis.com/css?family=Lato:100,300,400,700" rel="stylesheet" type="text/css">
      <link rel="stylesheet" type="text/css" href="{$baseUrl}css/directory/default.css">
    </head>
    <body>
      {call helpers.header data="all"}
        {param baseUrl: $baseUrl /}
      {/call}
      <div class="generic-wrapper">
        {call helpers.directory.genericList data="all" /}
      </div>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
    </body>
  </html>
{/template}


/**
 * Template that displays all locations in the directory in a list view with a dynamic map.
 //* @param logo The business logo that is displayed in the header
 * @param baseUrl the base url of current directory page
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 //* @param crumbNames Sorted list of breadcrumb names
 //* @param crumbUrls Sorted list of breadcrumb urls
 //* @param businessId Passthrough
 //* @param siteId Passthrough
 //* @param directoryId Passthrough
 //* @param? siteDomain
 */
{template .branchLocList}
  {lb}
    "locations": [
    {foreach $key in $keys}
      {call .location data="$key.loc"}
        {param baseUrl: $baseUrl /}
      {/call}
      {if not isLast($key)},{/if}
    {/foreach}
    ]
  {rb}
{/template}


/**
 * @param baseUrl
 * @param address1 Contains the street address
 * @param address2 Contains the second line of the street address
 * @param city
 * @param state The abbreviated format of a state
 * @param postalCode
 * @param country Abbreviated format of a country
 * @param latitude
 * @param longitude
// * @param description
 * @param displayAddress
 * @param hours
 * @param phone
// * @param phones
// * @param specialOffer
// * @param videos
// * @param crumbNames
// * @param crumbUrls
// * @param calendars
// * @param menus
 * @param customByName
 * @param name
 * @param id
// * @param businessId
// * @param siteId
// * @param locationPageSetId
// * @param siteDomain Passthrough
// * @param emails
// * @param corporateCode
 */
{template .location}

  {let $countryName}
    {lcountryName('en_US', $country)}
  {/let}

  {let $commercialName: 'Commercial' /}
  {let $geomodifier: $displayAddress ? $displayAddress : $city /}
  {let $isCommercialOnly: strlen($name) > strlen($commercialName) and substring($name, strlen($name) - strlen($commercialName)) == $commercialName /}
  {let $url}
    {$customByName['nq options'] |lower:true}
  {/let}

  {let $dataitem: [
    'loc': [
      'id': $id,
      'url': $url,
      'name': $name,
      'phone':  $phone,
      'address1':  $address1,
      'address2': $address2,
      'city':  $city,
      'geomodifier': $geomodifier,
      'state':  $state,
      'postalCode': $postalCode,
      'country': $countryName,
      'latitude': $latitude,
      'longitude': $longitude,
      'hours': $hours,
      'baseUrl': $baseUrl,
      'isCommercial': $isCommercialOnly
    ]
  ] /}

  {$dataitem |json}
{/template}
